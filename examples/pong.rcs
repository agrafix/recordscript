let void = #[Void]```
undefined
```;
let ignore = #[(a) => Void, r]```
(function (a) {
  return undefined;
})
```;
let debug = #[(a) => a, r]```
(function (a) {
  console.log(a);
  return a;
});
```;
let round = #[(Float) => Int, r]```
Math.round
```;
let int2float = #[(Int) => Float, r]```
(function (i) {
    return i;
})
```;
let requestAnimationFrame = #[((Float) => Void) => Void::io, r]```
(function (callback) {
   window.requestAnimationFrame(callback);
})
```;
let keyListener = #[<() => {up1: Int, down1: Int, up2: Int, down2: Int}::io>::io,]```
(function () {
    var keyState = {up1: 0, down1: 0, up2: 0, down2: 0};
    var handleDown = function (e) {
        switch (e.keyCode) {
            case 65: keyState.up1 = 1; break;
            case 89: keyState.down1 = 1; break;
            case 38: keyState.up2 = 1; break;
            case 40: keyState.down2 = 1; break;
            default: return;
        }
    };
    var handleUp = function (e) {
        switch (e.keyCode) {
            case 65: keyState.up1 = 0; break;
            case 89: keyState.down1 = 0; break;
            case 38: keyState.up2 = 0; break;
            case 40: keyState.down2 = 0; break;
            default: return;
        }
    };
    window.addEventListener('keydown', handleDown, false);
    window.addEventListener('keyup', handleUp, false);
    return function () {
        return keyState;
    };
})()
```;
let targetCanvas = #[Canvas::io]```
document.getElementById('game').getContext('2d')
```;
let setFillStyle = #[(Canvas::io, String) => Canvas::io, wr]```
(function (ctx, fillStyle) {
  ctx.fillStyle = fillStyle;
  return ctx;
})
```;
let fillRect = #[(Canvas::io, Int, Int, Int, Int) => Canvas::io, wrrrr]```
(function (ctx, x, y, width, height) {
  ctx.fillRect(x, y, width, height);
  return ctx;
})
```;
let fillText = #[(Canvas::io, String, Int, Int) => Canvas::io, wrrr]```
(function (ctx, s, x, y) {
  ctx.fillText(s, x, y);
  return ctx;
})
```;
let maxW = 500;
let maxH = 500;
let ballSize = 4;
let paddleWidth = 10;
let paddleHeight = 50;
let paddleHeightHalf = round(int2float(paddleHeight) / 2.0);
let initialState = {
    x: 0, y: round(int2float(maxH) / 2.0),
    x2: maxW - paddleWidth, y2: round(int2float(maxH) / 2.0),
    ballX: int2float(maxW) / 2.0,
    ballY: int2float(maxH) / 2.0,
    ballVX: 0.75,
    ballVY: -0.5,
    hit: false,
    gameOver: false
};
let paddleHit = (state) => {
    let minY = int2float(state.y);
    let maxY = int2float(state.y + paddleHeight);
    let minY2 = int2float(state.y2);
    let maxY2 = int2float(state.y2 + paddleHeight);
    let hitP1 = state.ballX <= int2float(paddleWidth) && state.ballY >= minY && state.ballY <= maxY;
    let hitP2 = state.ballX >= int2float(maxW - paddleWidth) && state.ballY >= minY2 && state.ballY <= maxY2;
    if (hitP1) {
      "1"
    } else if (hitP2) {
      "2"
    } else {
      "n"
    }
};
let sideHitFactor = (state) => {
    if (state.ballY <= 0.0 || state.ballY >= int2float(maxH)) {
      -1.0
    } else {
      1.0
    }
};
let isGameOver = (state) => {
    state.ballX <= 0.0 || state.ballX >= int2float(maxW)
};
let computeNextStateGame = (keys, tick, state) => {
    let nextX = state.x;
    let nextY = state.y - keys.up1 + keys.down1;
    let nextX2 = state.x2;
    let nextY2 = state.y2 - keys.up2 + keys.down2;
    let didHit = paddleHit(state);
    let factor = if (didHit != "n") {
      -1.0
    } else {
      1.0
    };
    let ballX = if (didHit == "1") {
      int2float(paddleWidth) + 5.0
    } else if (didHit == "2") {
      int2float(maxW - paddleWidth) - 5.0
    } else {
      state.ballX
    };
    let sideHitF = sideHitFactor(state);
    let nextBallVX = factor * state.ballVX;
    let nextBallVY = sideHitF * state.ballVY;
    let nextBallX = ballX + nextBallVX;
    let nextBallY = state.ballY + nextBallVY;
    {...!state, x: nextX, y: nextY, x2: nextX2, y2: nextY2, ballX: nextBallX, ballY: nextBallY, ballVX: nextBallVX, ballVY: nextBallVY, hit: didHit != "n", gameOver: isGameOver(state)}
};
let computeNextState = (keys, tick, state) => {
    if (state.gameOver) {
       state
    } else {
       computeNextStateGame(keys, tick, state)
    }
};
let drawGame = (ctx, state) => {
    let ctx1 = fillRect(setFillStyle(ctx, "white"), 0, 0, maxW, maxH);
    let ctx2 = fillRect(setFillStyle(ctx1, "black"), state.x, state.y + paddleHeightHalf, paddleWidth, paddleHeight);
    let ctx3 = fillRect(setFillStyle(ctx2, "black"), state.x2, state.y2 + paddleHeightHalf, paddleWidth, paddleHeight);
    let ballColor = if (state.hit) {
        "red"
    } else {
        "black"
    };
    fillRect(setFillStyle(ctx3, ballColor), round(state.ballX), round(state.ballY), ballSize, ballSize)
};
let draw = (ctx, state) => {
    if (state.gameOver) {
       let ctx1 = fillRect(setFillStyle(ctx, "red"), 0, 0, maxW, maxH);
       fillText(setFillStyle(ctx1, "black"), "Game over", 250, 250)
    } else {
       drawGame(ctx, state)
    }
};
let loop = (ctx, state) => {
    requestAnimationFrame((tick) => {
        let keys = keyListener();
        let nextState = computeNextState(keys, tick, state);
        let nextContext = draw(ctx, nextState);
        if (!nextState.gameOver) {
          loop(nextContext, nextState)
        } else {
          void
        }
    })
};
let main = () => {
    loop(targetCanvas, initialState)
};
main()